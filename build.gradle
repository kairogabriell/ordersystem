plugins {
    id 'java'
    id 'org.flywaydb.flyway' version '8.0.0'
    id 'application'
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.flywaydb:flyway-core:8.0.0'
    implementation 'org.postgresql:postgresql:42.2.20'
    implementation 'com.sparkjava:spark-core:2.9.3'
    implementation 'ch.qos.logback:logback-classic:1.2.10'
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'com.google.code.gson:gson:2.8.9'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
    testImplementation 'org.mockito:mockito-core:4.5.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.5.1'
    testImplementation 'io.rest-assured:rest-assured:5.3.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

test {
    useJUnitPlatform()
    systemProperty 'env', 'test'
}

// Função para carregar propriedades do arquivo especificado
def loadProperties(filePath) {
    def properties = new Properties()
    file(filePath).withInputStream { stream ->
        properties.load(stream)
    }
    return properties
}

// Definir o valor de 'env'
def env = project.hasProperty('env') ? project.env : 'prod'
println "Ambiente atual: ${env}"

def propertiesFile = env == 'test' ? 'src/main/resources/application-test.properties' : 'src/main/resources/application.properties'

if (!file(propertiesFile).exists()) {
    throw new GradleException("O arquivo de propriedades '${propertiesFile}' não foi encontrado.")
}

def properties = loadProperties(propertiesFile)

flyway {
    schemas = ['public']
    locations = ['filesystem:src/main/resources/db/migration']
    baselineOnMigrate = true
}

// Executar migration no ambinete de test
task migrateTestDb(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    doFirst {
        def testProperties = loadProperties('src/main/resources/application-test.properties')
        println "Migrando banco de dados de teste com URL: ${testProperties.getProperty('db.url')}"
        url = testProperties.getProperty('db.url')
        user = testProperties.getProperty('db.username')
        password = testProperties.getProperty('db.password')
    }
}

// Executar migration no ambinete de produção
task migrateProdDb(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    doFirst {
        def prodProperties = loadProperties('src/main/resources/application.properties')
        println "Migrando banco de dados de produção com URL: ${prodProperties.getProperty('db.url')}"
        url = prodProperties.getProperty('db.url')
        user = prodProperties.getProperty('db.username')
        password = prodProperties.getProperty('db.password')
    }
}

// Executar aplicação no ambinete de testes
task runTest(type: JavaExec) {
    mainClass = 'com.example.ordersystem.Main'
    classpath = sourceSets.main.runtimeClasspath
    args = []
    environment 'env', 'test'
}

// Executar aplicação no ambinete de produção
task runMain(type: JavaExec) {
    mainClass = 'com.example.ordersystem.Main'
    classpath = sourceSets.main.runtimeClasspath
    args = []
    environment 'env', 'prod'
}